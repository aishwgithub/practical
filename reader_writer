#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
int count = 0;  // Tracks items in the buffer

pthread_mutex_t mutex;  // Mutex to protect buffer access
sem_t empty;  // Semaphore to track empty slots
sem_t full;   // Semaphore to track filled slots

void* producer(void* arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        item =i+1;  // Produce a random item

        sem_wait(&empty);  // Wait if buffer is full
        pthread_mutex_lock(&mutex);  // Lock mutex to access buffer

        buffer[count++] = item;  // Add item to the buffer
        printf("Produced: %d\n", item);

        pthread_mutex_unlock(&mutex);  // Unlock mutex
        sem_post(&full);  // Signal that buffer has a new item

        sleep(1);  // Simulate time for producing item
    }
    return NULL;
}

void* consumer(void* arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        sem_wait(&full);  // Wait if buffer is empty
        pthread_mutex_lock(&mutex);  // Lock mutex to access buffer

        item = buffer[--count];  // Remove item from buffer
        printf("Consumed: %d\n", item);

        pthread_mutex_unlock(&mutex);  // Unlock mutex
        sem_post(&empty);  // Signal that buffer has a new empty slot

        sleep(1);  // Simulate time for consuming item
    }
    return NULL;
}

int main() {
    pthread_t prod, cons;

    // Initialize semaphores and mutex
    sem_init(&empty, 0, BUFFER_SIZE);  // BUFFER_SIZE empty slots initially
    sem_init(&full, 0, 0);             // No filled slots initially
    pthread_mutex_init(&mutex, NULL);

    // Create producer and consumer threads
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    // Wait for both threads to finish
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    // Clean up
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
