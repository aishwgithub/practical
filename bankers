#include <stdio.h>
#include <stdbool.h>

#define MAX 10 // Maximum number of processes
#define RESOURCES 3 // Number of resources

// Function prototypes
void calculateNeed(int need[MAX][RESOURCES], int max[MAX][RESOURCES], int allot[MAX][RESOURCES], int n, int m);
bool isSafe(int processes[], int avail[], int max[][RESOURCES], int allot[][RESOURCES], int n, int m);
void requestResources(int processes[], int avail[], int max[][RESOURCES], int allot[][RESOURCES], int n, int m);

int main() {
    int processes[MAX], max[MAX][RESOURCES], allot[MAX][RESOURCES], avail[RESOURCES];
    int n, m = RESOURCES; // Number of processes and resources

    printf("Enter the number of processes: ");
    scanf("%d", &n);
    
    for (int i = 0; i < n; i++) {
        processes[i] = i;
    }

    printf("Enter maximum resources for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    printf("Enter allocated resources for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < m; j++) {
            scanf("%d", &allot[i][j]);
        }
    }

    printf("Enter available resources: ");
    for (int j = 0; j < m; j++) {
        scanf("%d", &avail[j]);
    }

    requestResources(processes, avail, max, allot, n, m);

    return 0;
}

// Function to calculate the need matrix
void calculateNeed(int need[MAX][RESOURCES], int max[MAX][RESOURCES], int allot[MAX][RESOURCES], int n, int m) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            need[i][j] = max[i][j] - allot[i][j];
        }
    }
}

// Function to check if the system is in a safe state
bool isSafe(int processes[], int avail[], int max[][RESOURCES], int allot[][RESOURCES], int n, int m) {
    int need[MAX][RESOURCES];
    calculateNeed(need, max, allot, n, m);

    bool finish[MAX] = {0};
    int safeSeq[MAX];
    int work[RESOURCES];
    
    for (int i = 0; i < m; i++) {
        work[i] = avail[i];
    }

    int count = 0;
    while (count < n) {
        bool found = false;
        for (int p = 0; p < n; p++) {
            if (!finish[p]) {
                int j;
                for (j = 0; j < m; j++) {
                    if (need[p][j] > work[j]) {
                        break;
                    }
                }
                if (j == m) {
                    for (int k = 0; k < m; k++) {
                        work[k] += allot[p][k];
                    }
                    safeSeq[count++] = p;
                    finish[p] = true;
                    found = true;
                }
            }
        }
        if (!found) {
            printf("System is not in a safe state.\n");
            return false;
        }
    }
    printf("System is in a safe state.\nSafe sequence is: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", safeSeq[i]);
    }
    printf("\n");
    return true;
}

// Function to request resources
void requestResources(int processes[], int avail[], int max[][RESOURCES], int allot[][RESOURCES], int n, int m) {
    int request[RESOURCES];
    int processNum;

    printf("Enter process number to request resources (0 to %d): ", n - 1);
    scanf("%d", &processNum);
    
    printf("Enter request for process %d: ", processNum);
    for (int i = 0; i < m; i++) {
        scanf("%d", &request[i]);
    }

    for (int i = 0; i < m; i++) {
        if (request[i] > max[processNum][i]) {
            printf("Error: Process has exceeded its maximum claim.\n");
            return;
        }
    }

    for (int i = 0; i < m; i++) {
        if (request[i] > avail[i]) {
            printf("Error: Resources not available.\n");
            return;
        }
    }

    for (int i = 0; i < m; i++) {
        avail[i] -= request[i];
        allot[processNum][i] += request[i];
    }

    if (isSafe(processes, avail, max, allot, n, m)) {
        printf("Resources allocated successfully.\n");
    } else {
        for (int i = 0; i < m; i++) {
            avail[i] += request[i];
            allot[processNum][i] -= request[i];
        }
        printf("Resources cannot be allocated, rolling back.\n");
    }
}
