#include <stdio.h>

int findOptimal(int frames[], int frame_size, int pages[], int num_pages, int current_index) {
    int farthest = current_index;
    int optimal_page = -1;

    for (int i = 0; i < frame_size; i++) {
        int j;
        for (j = current_index; j < num_pages; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    optimal_page = i;
                }
                break;
            }
        }

        if (j == num_pages) {
            return i;  // If a page in the frame isn't used in future
        }
    }

    return optimal_page;
}

void OPT(int pages[], int num_pages, int frame_size) {
    int frames[frame_size];
    int page_faults = 0;

    for (int i = 0; i < frame_size; i++) {
        frames[i] = -1;  // Initialize frames with -1 (empty)
    }

    for (int i = 0; i < num_pages; i++) {
        int page = pages[i];
        int found = 0;

        // Check if the page is already in the frames
        for (int j = 0; j < frame_size; j++) {
            if (frames[j] == page) {
                found = 1;
                break;
            }
        }

        // If page not found, replace using optimal algorithm
        if (!found) {
            int replace_index = -1;

            // If there is an empty frame, use it
            for (int j = 0; j < frame_size; j++) {
                if (frames[j] == -1) {
                    replace_index = j;
                    break;
                }
            }

            // If no empty frame, replace the optimal page
            if (replace_index == -1) {
                replace_index = findOptimal(frames, frame_size, pages, num_pages, i + 1);
            }

            frames[replace_index] = page;
            page_faults++;
        }

        // Print the current page frames
        printf("Step %d: ", i + 1);
        for (int j = 0; j < frame_size; j++) {
            if (frames[j] != -1) {
                printf("%d ", frames[j]);
            } else {
                printf("- ");
            }
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", page_faults);
}

int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 3};
    int num_pages = sizeof(pages) / sizeof(pages[0]);
    int frame_size = 3;  // Minimum frame size of 3

    printf("Optimal Page Replacement:\n");
    OPT(pages, num_pages, frame_size);

    return 0;
}
