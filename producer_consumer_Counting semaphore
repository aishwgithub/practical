#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
int count = 0;  // Keeps track of items in the buffer

sem_t empty;   // Counts empty slots in the buffer
sem_t full;    // Counts filled slots in the buffer
pthread_mutex_t mutex;  // Ensures mutual exclusion for accessing the buffer

void* producer(void* arg) {
    int item, i;
    for (i = 0; i < 10; i++) { // Produces 10 items
        item = rand() % 100; // Produce an item

        sem_wait(&empty);  // Wait if buffer is full
        pthread_mutex_lock(&mutex);  // Lock buffer access

        buffer[count++] = item;  // Add item to the buffer
        printf("Produced: %d\n", item);

        pthread_mutex_unlock(&mutex);  // Unlock buffer access
        sem_post(&full);  // Increment filled slots

        sleep(1);  // Simulate production time
    }
    return NULL;
}

void* consumer(void* arg) {
    int item, i;
    for (i = 0; i < 10; i++) { // Consumes 10 items
        sem_wait(&full);  // Wait if buffer is empty
        pthread_mutex_lock(&mutex);  // Lock buffer access

        item = buffer[--count];  // Remove item from the buffer
        printf("Consumed: %d\n", item);

        pthread_mutex_unlock(&mutex);  // Unlock buffer access
        sem_post(&empty);  // Increment empty slots

        sleep(1);  // Simulate consumption time
    }
    return NULL;
}

int main() {
    pthread_t prod, cons;

    sem_init(&empty, 0, BUFFER_SIZE);  // BUFFER_SIZE empty slots initially
    sem_init(&full, 0, 0);             // No filled slots initially
    pthread_mutex_init(&mutex, NULL);

    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
