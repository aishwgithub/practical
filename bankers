#include <stdio.h>
int main()
{
// P0, P1, P2, P3, P4 are the Process names here
int n, m, i, j, k;
n = 5; // Number of processes
m = 3; // Number of resources
int alloc[5][3] = { { 0, 1, 0 }, // P0 // Allocation Matrix

{ 2, 0, 0 }, // P1
{ 3, 0, 2 }, // P2
{ 2, 1, 1 }, // P3
{ 0, 0, 2 } }; // P4

int max[5][3] = { { 7, 5, 3 }, // P0 // MAX Matrix
{ 3, 2, 2 }, // P1
{ 9, 0, 2 }, // P2
{ 2, 2, 2 }, // P3
{ 4, 3, 3 } }; // P4

int avail[3] = { 3, 3, 2 }; // Available Resources
int f[n], ans[n], ind = 0;

for (k = 0; k < n; k++) 
{
f[k] = 0;
}
int need[n][m];

for (i = 0; i < n; i++)
{
for (j = 0; j < m; j++)
need[i][j] = max[i][j] - alloc[i][j];
}
int y = 0;
  for (k = 0; k < 5; k++)
{
 for (i = 0; i < n; i++) 
{
  if (f[i] == 0) 
  {
   int flag = 0;
for (j = 0; j < m; j++) 
{
  if (need[i][j] > avail[j])
 {
 flag = 1;
 break;
}
}
if (flag == 0)
{
ans[ind++] = i;
for (y = 0; y < m; y++)
avail[y] += alloc[i][y];
f[i] = 1;
}
}
}
}
int flag = 1;
for(int i=0;i<n;i++)
{
if(f[i]==0) 
{
flag=0;
printf("The following system is not safe");
break;
}
}
if(flag==1)
{
printf("Following is the SAFE Sequence\n");
for (i = 0; i < n - 1; i++)
printf(" P%d ->", ans[i]);
printf(" P%d", ans[n - 1]);
}

return (0);

} 

---------------------------------------------------------------------------or------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------



#include <stdio.h>
#include <stdbool.h>

void calculateNeed(int need[][10], int max[][10], int allot[][10], int P, int R) {
    for (int i = 0; i < P; i++)
        for (int j = 0; j < R; j++)
            need[i][j] = max[i][j] - allot[i][j];
}

bool isSafe(int processes[], int avail[], int max[][10], int allot[][10], int P, int R) {
    int need[10][10];
    int finish[10] = {0};
    int safeSeq[10];
    int work[10];

    calculateNeed(need, max, allot, P, R);

    for (int i = 0; i < R; i++)
        work[i] = avail[i];

    int count = 0;
    while (count < P) {
        bool found = false;
        for (int p = 0; p < P; p++) {
            if (finish[p] == 0) {
                int j;
                for (j = 0; j < R; j++)
                    if (need[p][j] > work[j])
                        break;

                if (j == R) {
                    for (int k = 0; k < R; k++)
                        work[k] += allot[p][k];
                    safeSeq[count++] = p;
                    finish[p] = 1;
                    found = true;
                }
            }
        }

        if (found == false) {
            printf("System is not in a safe state\n");
            return false;
        }
    }

    printf("System is in a safe state.\nSafe sequence is: ");
    for (int i = 0; i < P; i++)
        printf("%d ", safeSeq[i]);
    printf("\n");

    return true;
}

int main() {
    int P, R;
    int processes[10];
    int avail[10];
    int max[10][10];
    int allot[10][10];

    printf("Enter the number of processes: ");
    scanf("%d", &P);

    printf("Enter the number of resources: ");
    scanf("%d", &R);

    printf("Enter the available resources for each type: ");
    for (int i = 0; i < R; i++)
        scanf("%d", &avail[i]);

    printf("Enter the maximum demand matrix:\n");
    for (int i = 0; i < P; i++) {
        processes[i] = i; 
        printf("For process %d: ", i);
        for (int j = 0; j < R; j++)
            scanf("%d", &max[i][j]);
    }

    printf("Enter the allocation matrix:\n");
    for (int i = 0; i < P; i++) {
        printf("For process %d: ", i);
        for (int j = 0; j < R; j++)
            scanf("%d", &allot[i][j]);
    }

    isSafe(processes, avail, max, allot, P, R);

    return 0;
}
