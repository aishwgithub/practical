#include <stdio.h>
#include <stdlib.h>

void sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++)
        for (int j = i + 1; j < n; j++)
            if (arr[i] > arr[j]) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
}

void SSTF(int requests[], int n, int head) {
    int totalSeekTime = 0, distance, closest, minDistance, index;

    for (int i = 0; i < n; i++) {
        minDistance = __INT_MAX__;
        for (int j = 0; j < n; j++) {
            if (requests[j] != -1) {
                distance = abs(head - requests[j]);
                if (distance < minDistance) {
                    minDistance = distance;
                    closest = requests[j];
                    index = j;
                }
            }
        }
        totalSeekTime += minDistance;
        head = closest;
        requests[index] = -1;
    }
    printf("Total Seek Time (SSTF): %d\n", totalSeekTime);
}

int main() {
    int n, head;
    printf("Enter the number of requests: ");
    scanf("%d", &n);

    int requests[n];
    printf("Enter the request queue: ");
    for (int i = 0; i < n; i++) scanf("%d", &requests[i]);

    printf("Enter the initial head position: ");
    scanf("%d", &head);

    SSTF(requests, n, head);
    return 0;
}


-------------------------------------------------------------------------or----------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, i, j, head, size, seek = 0, diff;
    int queue[20], serviced[20], index;

    printf("Enter the size of the disk: ");
    scanf("%d", &size);
    printf("Enter the number of requests: ");
    scanf("%d", &n);
    printf("Enter the initial head position: ");
    scanf("%d", &head);

    printf("Enter the request sequence: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &queue[i]);
        serviced[i] = 0; // Mark all requests as not serviced
    }

    // Loop through all requests
    for (i = 0; i < n; i++) {
        int min = 10000;
        // Find the request with the minimum seek time from the current head
        for (j = 0; j < n; j++) {
            if (!serviced[j]) {
                diff = abs(queue[j] - head);
                if (diff < min) {
                    min = diff;
                    index = j;
                }
            }
        }
        // Service the request
        seek += min;
        head = queue[index];
        serviced[index] = 1; // Mark this request as serviced
    }

    printf("Total seek time: %d\n", seek);
    return 0;
}

---------------------------------------------------------------------------or-----------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include <stdio.h>

int findOptimal(int frames[], int frame_size, int pages[], int num_pages, int current_index) {
    int farthest = current_index;
    int optimal_page = -1;

    for (int i = 0; i < frame_size; i++) {
        int j;
        for (j = current_index; j < num_pages; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    optimal_page = i;
                }
                break;
            }
        }

        if (j == num_pages) {
            return i;  // If a page in the frame isn't used in future
        }
    }

    return optimal_page;
}

void OPT(int pages[], int num_pages, int frame_size) {
    int frames[frame_size];
    int page_faults = 0;

    // Initialize frames with -1 (empty)
    for (int i = 0; i < frame_size; i++) {
        frames[i] = -1;
    }

    // Iterate through each page reference
    for (int i = 0; i < num_pages; i++) {
        int page = pages[i];
        int found = 0;

        // Check if the page is already in one of the frames
        for (int j = 0; j < frame_size; j++) {
            if (frames[j] == page) {
                found = 1;
                break;
            }
        }

        // If the page is not found, replace it using optimal algorithm
        if (!found) {
            int replace_index = -1;

            // If there is an empty frame, use it
            for (int j = 0; j < frame_size; j++) {
                if (frames[j] == -1) {
                    replace_index = j;
                    break;
                }
            }

            // If no empty frame, replace the optimal page
            if (replace_index == -1) {
                replace_index = findOptimal(frames, frame_size, pages, num_pages, i + 1);
            }

            frames[replace_index] = page;
            page_faults++;
        }

        // Print the current page frames
        printf("Step %d: ", i + 1);
        for (int j = 0; j < frame_size; j++) {
            if (frames[j] != -1) {
                printf("%d ", frames[j]);
            } else {
                printf("- ");
            }
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", page_faults);
}

int main() {
    int num_pages, frame_size;

    // Get number of pages from the user
    printf("Enter the number of pages: ");
    scanf("%d", &num_pages);

    int pages[num_pages];

    // Get the page references from the user
    printf("Enter the page references (space-separated): ");
    for (int i = 0; i < num_pages; i++) {
        scanf("%d", &pages[i]);
    }

    // Get the frame size from the user
    printf("Enter the number of frames: ");
    scanf("%d", &frame_size);

    printf("\nOptimal Page Replacement:\n");
    OPT(pages, num_pages, frame_size);

    return 0;
}
