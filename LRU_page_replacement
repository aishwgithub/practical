#include <stdio.h>

void LRU(int pages[], int num_pages, int frame_size) {
    int frames[frame_size];
    int page_faults = 0;

    for (int i = 0; i < frame_size; i++) {
        frames[i] = -1;  // Initialize frames with -1 (empty)
    }

    for (int i = 0; i < num_pages; i++) {
        int page = pages[i];
        int found = 0;

        // Check if the page is already in the frames
        for (int j = 0; j < frame_size; j++) {
            if (frames[j] == page) {
                found = 1;

                // Move the page to the end to mark it as recently used
                for (int k = j; k < frame_size - 1; k++) {
                    frames[k] = frames[k + 1];
                }
                frames[frame_size - 1] = page;
                break;
            }
        }

        // If page not found, replace the least recently used page
        if (!found) {
            for (int j = 0; j < frame_size - 1; j++) {
                frames[j] = frames[j + 1];
            }
            frames[frame_size - 1] = page;
            page_faults++;
        }

        // Print the current page frames
        printf("Step %d: ", i + 1);
        for (int j = 0; j < frame_size; j++) {
            if (frames[j] != -1) {
                printf("%d ", frames[j]);
            } else {
                printf("- ");
            }
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", page_faults);
}

int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 3};
    int num_pages = sizeof(pages) / sizeof(pages[0]);
    int frame_size = 3;  // Minimum frame size of 3

    printf("LRU Page Replacement:\n");
    LRU(pages, num_pages, frame_size);

    return 0;
}

---------------------------------------------------------------------------------or---------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------


#include <stdio.h>

void LRU(int pages[], int num_pages, int frame_size) {
    int frames[frame_size];
    int page_faults = 0;

    // Initialize all frames to -1 (empty)
    for (int i = 0; i < frame_size; i++) {
        frames[i] = -1;
    }

    // Process each page in the reference string
    for (int i = 0; i < num_pages; i++) {
        int page = pages[i];
        int found = 0;

        // Check if the page is already in the frames
        for (int j = 0; j < frame_size; j++) {
            if (frames[j] == page) {
                found = 1;

                // Move the page to the end to mark it as recently used
                for (int k = j; k < frame_size - 1; k++) {
                    frames[k] = frames[k + 1];
                }
                frames[frame_size - 1] = page;
                break;
            }
        }

        // If page not found, replace the least recently used page
        if (!found) {
            for (int j = 0; j < frame_size - 1; j++) {
                frames[j] = frames[j + 1];
            }
            frames[frame_size - 1] = page;
            page_faults++;
        }

        // Print the current page frames
        printf("Step %d: ", i + 1);
        for (int j = 0; j < frame_size; j++) {
            if (frames[j] != -1) {
                printf("%d ", frames[j]);
            } else {
                printf("- ");
            }
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", page_faults);
}

int main() {
    int num_pages, frame_size;

    // Get the number of page references from the user
    printf("Enter the number of page references: ");
    scanf("%d", &num_pages);

    int pages[num_pages];

    // Get the page reference string from the user
    printf("Enter the page reference string (space-separated): ");
    for (int i = 0; i < num_pages; i++) {
        scanf("%d", &pages[i]);
    }

    // Get the frame size from the user
    printf("Enter the number of frames: ");
    scanf("%d", &frame_size);

    // Perform the LRU page replacement algorithm
    printf("\nLRU Page Replacement:\n");
    LRU(pages, num_pages, frame_size);

    return 0;
}
