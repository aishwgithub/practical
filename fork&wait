#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int n;
    printf("Enter number of integers: ");
    scanf("%d", &n);
    int arr[n];

    printf("Enter integers:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    int pid = fork();
    
    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {  // Child process
        printf("Child process sorting the integers...\n");
        bubbleSort(arr, n);

        printf("Sorted by Child: ");
        for (int i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");
        
        printf("Child process exiting, becoming zombie briefly...\n");
        exit(0);  // Exiting child process (zombie state until parent waits)
    } else {  // Parent process
        wait(NULL);  // Wait for child process (prevent zombie state)
        printf("Child process completed. Parent now sorting.\n");

        bubbleSort(arr, n);
        printf("Sorted by Parent: ");
        for (int i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");
        
        // To simulate orphan state, parent sleeps to allow child to finish first
        sleep(2);
        printf("Parent process exiting.\n");
    }

    return 0;
}
