#include <stdio.h>
#include <stdlib.h>

void sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++)
        for (int j = i + 1; j < n; j++)
            if (arr[i] > arr[j]) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
}

void SSTF(int requests[], int n, int head) {
    int totalSeekTime = 0, distance, closest, minDistance, index;

    for (int i = 0; i < n; i++) {
        minDistance = __INT_MAX__;
        for (int j = 0; j < n; j++) {
            if (requests[j] != -1) {
                distance = abs(head - requests[j]);
                if (distance < minDistance) {
                    minDistance = distance;
                    closest = requests[j];
                    index = j;
                }
            }
        }
        totalSeekTime += minDistance;
        head = closest;
        requests[index] = -1;
    }
    printf("Total Seek Time (SSTF): %d\n", totalSeekTime);
}

int main() {
    int n, head;
    printf("Enter the number of requests: ");
    scanf("%d", &n);

    int requests[n];
    printf("Enter the request queue: ");
    for (int i = 0; i < n; i++) scanf("%d", &requests[i]);

    printf("Enter the initial head position: ");
    scanf("%d", &head);

    SSTF(requests, n, head);
    return 0;
}


-------------------------------------------------------------------------or----------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, i, j, head, size, seek = 0, diff;
    int queue[20], serviced[20], index;

    printf("Enter the size of the disk: ");
    scanf("%d", &size);
    printf("Enter the number of requests: ");
    scanf("%d", &n);
    printf("Enter the initial head position: ");
    scanf("%d", &head);

    printf("Enter the request sequence: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &queue[i]);
        serviced[i] = 0; // Mark all requests as not serviced
    }

    // Loop through all requests
    for (i = 0; i < n; i++) {
        int min = 10000;
        // Find the request with the minimum seek time from the current head
        for (j = 0; j < n; j++) {
            if (!serviced[j]) {
                diff = abs(queue[j] - head);
                if (diff < min) {
                    min = diff;
                    index = j;
                }
            }
        }
        // Service the request
        seek += min;
        head = queue[index];
        serviced[index] = 1; // Mark this request as serviced
    }

    printf("Total seek time: %d\n", seek);
    return 0;
}
