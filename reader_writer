#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>

sem_t write_lock;                    // Semaphore to control access to the resource
pthread_mutex_t reader_count_lock;    // Mutex to control access to reader count
int shared_data = 1;                  // Shared resource
int active_readers = 0;               // Number of active readers

void* writer(void* writer_id) {
    int id = (int)writer_id;        // Properly cast writer_id

    sem_wait(&write_lock);            // Wait for access to resource
    shared_data = shared_data * 2;    // Modify resource
    printf("Writer %d modified shared_data to %d\n", id, shared_data);

    sem_post(&write_lock);            // Release access to resource
    return NULL;
}

void* reader(void* reader_id) {
    int id = (int)reader_id;        // Properly cast reader_id

    pthread_mutex_lock(&reader_count_lock);     // Lock before modifying reader count
    active_readers++;
    if (active_readers == 1) {
        sem_wait(&write_lock);        // First reader locks the resource
    }
    pthread_mutex_unlock(&reader_count_lock);   // Unlock after updating reader count

    printf("Reader %d read shared_data as %d\n", id, shared_data);  // Read resource


    pthread_mutex_lock(&reader_count_lock);     // Lock before modifying reader count
    active_readers--;
    if (active_readers == 0) {
        sem_post(&write_lock);        // Last reader unlocks the resource
    }
    pthread_mutex_unlock(&reader_count_lock);   // Unlock after updating reader count
    return NULL;
}

int main() {
    pthread_t readers[5], writers[3];
    int ids[5] = {1, 2, 3, 4, 5};     // IDs for readers and writers

    pthread_mutex_init(&reader_count_lock, NULL);
    sem_init(&write_lock, 0, 1);

    // Create reader and writer threads
    for (int i = 0; i < 5; i++) {
        pthread_create(&readers[i], NULL, reader, &ids[i]);
    }
    for (int i = 0; i < 3; i++) {
        pthread_create(&writers[i], NULL, writer, &ids[i]);
    }

    // Wait for threads to finish
    for (int i = 0; i < 5; i++) {
        pthread_join(readers[i], NULL);
    }
    for (int i = 0; i < 3; i++) {
        pthread_join(writers[i], NULL);
    }

    pthread_mutex_destroy(&reader_count_lock);
    sem_destroy(&write_lock);
    return 0;
}
